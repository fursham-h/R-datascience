---
title: Creating an R Notebook 
author: Fursham Hamid
date: "`r Sys.Date()`"
output: 
    html_notebook:
        theme: cerulean         # additional themes and resources
        toc: true
        toc_depth: 1
        toc_float: true
        number_sections: true
---


Text can be written anywhere within the document. 
Text written on a new line will not be rendered as a new paragraph.

To create a new paragraph, leave a linespace from the previous sentence.

Headers and sub-headers can be created using the `#` symbol. The depth of the sub-headers
depend on the number of `#` symbol; 1 symbol represents the top-most layer.

# Formatting text in Markdown format

You will also notice that the table of contents is automatically updated
to include level1 headers. 

Below is how you write a sub-header

## Create bullet points

Bullets points can be created as such (make sure you leave a space before writing your bullet points):

- Point 1
- Point 2 

Substituting hyphen with a number will create numbered bullet points:

1. Point 1
2. Point 2

## Formatting text

There are several ways to make standard types of formatted text:

- *italics*
- **bold**
- `code`
- [weblinks](https://www.google.com/)

## Adding in-line image

You can add an image into text using the following syntax:

![](https://raw.githubusercontent.com/fursham-h/R-datascience/master/vignettes/5_RNotebook/Rnotebook-message.PNG)



# Writing code in RNotebook

The simplest way to write code is using the ` symbol. You have to specify
the language to be interpreted. For example, the line below will return the 
value of 1+1 using R language:

`r 1+1`

A better way is to write your code in "chunks". To create code chunks,
click the `+C` button at the top of this document, and select your language:

```{r writingcode}
# you may name your code chunk by typing a string after "r" above

# sames rules of writing a script applies here. Comments begin with a #
1+1

# The entire chunk can be executed by clicking the 
# "play" button at the top right hand side of the chunk
# REMEMBER TO RUN THE CHUNK EVERYTIME THE CODE CHANGES
```

You may configure the output of each chunk by clicking the "cogwheel" button at the top right
corner of the chunk:

```{r configoutput, echo=FALSE}
# In this example, only the output is shown
1+1
```




# Display interactive tables from data-frame/matrix

You can display data-frames or matrices as tables
natively by printing the table out within a code-chunk

```{r}
# mtcars is a data-frame that comes with tidyverse package
# typing the name of this variable will display the contents
mtcars
```

The table above is static. This can be easily made interactive using the DT package.


```{r}
datatable(mtcars)
```

Bonus: you may apply add-ons to your table to allow filtering and exporting of data
```{r}
datatable(mtcars, extensions = "Buttons", options = list(dom = "Blfrtip",
                           buttons = c("copy", "csv", "excel"),
                           scrollX = TRUE), filter = "top")
```

# Create interactive plots

Create basic plots the same way as you normally do within a code chunk.

```{r}
plot <- ggplot(mtcars, aes(x=mpg, y = disp)) + geom_point()
plot
```


You may configure figure dimension and other options by changing the
chunk properties.

```{r, fig.width=8, fig.height=8}
plot
```

To create an interactive version of your ggplot, simple
use function `ggplotly()` with the plot name as 
input variable.

```{r}
ggplotly(plot)
```





